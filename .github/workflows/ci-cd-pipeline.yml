name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # master 브랜치에 푸시될 때마다 실행

jobs:
  build:
    runs-on: ubuntu-latest  # Ubuntu 환경에서 실행

    steps:
      # 1. 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build  # .jar 파일을 build/libs/에 생성

      # 3. Docker Compose 설치
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # 4. Docker Hub 로그인 (DOCKER_USERNAME과 DOCKER_PASSWORD 사용)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Docker Compose 빌드 및 실행
      - name: Build and run with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up --build -d

  deploy:
    runs-on: ubuntu-latest  # 배포 작업을 실행할 환경
    needs: build  # 빌드가 완료된 후에 배포 시작

    steps:
      # 6. SSH 연결을 설정하고 서버에 배포
      - name: Deploy to server
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa  # SSH 키 권한 설정
          ssh -o StrictHostKeyChecking=no user@your_server_ip << 'EOF'
          cd /path/to/your/repo  # 배포 디렉토리로 이동
          git pull origin master  # 최신 코드 받아오기
          docker-compose -f docker-compose.yml down  # 기존 컨테이너 종료
          docker-compose -f docker-compose.yml up -d  # 새로운 컨테이너 실행
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # SSH 키를 환경 변수로 전달
